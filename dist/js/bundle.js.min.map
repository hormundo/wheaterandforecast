{"version":3,"sources":["script.js"],"names":["KEY","URLBASE","citiesLocal","document","addEventListener","e","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","getCity","error","console","log","getCitiesMenu","$citiesFav","querySelector","firstChild","removeChild","citiesSplit","localStorage","getItem","split","result","filter","item","index","indexOf","sort","forEach","insertAdjacentHTML","forecastCity","json","style","display","forecast","dia","icon","desc","mintemp","maxtemp","innerHTML","$template","content","$fragment","createDocumentFragment","i","list","dt_txt","weather","description","Math","round","main","temp_min","temp_max","textContent","src","$clone","importNode","appendChild","hightlights","wind","speed","width","humidity","pressure","sea_level","async","city","unit","url","res","fetch","name","population","temperature","temp","sub","createElement","classList","add","sunset","moment","unix","sunsetHour","_d","getHours","sunsetMinutes","sunrise","sunriseHour","sunriseMinutes","insertAdjacentElement","dayWeek","date","Date","getUTCDay","toLocaleDateString","ok","status","statusText","synth","window","speechSynthesis","text","utterThis","SpeechSynthesisUtterance","speak","err","message","target","matches","remove","value","setItem","parentElement"],"mappings":"AAAA,MAAAA,IAAA,mCACAC,QAAA,mDAEAC,YAAA,GAEAC,SAAAC,iBAAA,mBAAAC,IAGAC,UAAAC,aAAAD,UAAAC,YAAAC,oBAAA,SAAAC,GAGAC,IAAAD,EAAAE,OAAAC,SACAC,IAAAJ,EAAAE,OAAAG,UAEAC,QAAAL,IAAAG,IAAA,SAEA,SAAAG,GAGAC,QAAAC,IAAA,4BAGAC,kBAGA,MAAAA,cAAA,KAEA,IAAAC,EAAAjB,SAAAkB,cAAA,eAGA,KAAAD,EAAAE,YACAF,EAAAG,YAAAH,EAAAE,YAGA,IAEAE,EAFAC,aAAAC,QAAA,YAEAC,MAAA,KAEAC,EAAAJ,EAAAK,OAAA,CAAAC,EAAAC,IACAP,EAAAQ,QAAAF,KAAAC,GAGAH,EAAAK,KAEAL,GACAA,EAAAM,QAAA7B,IACAe,EAAAe,mBAAA,aAAA,gGAEA9B,kNAQA+B,aAAAC,IACAlC,SAAAkB,cAAA,qBAAAiB,MAAAC,QAAA,OACApC,SAAAkB,cAAA,qBAAAiB,MAAAC,QAAA,OAEA,MAAAC,EAAA,CACAC,IAAA,GACAC,KAAA,GACAC,KAAA,GACAC,QAAA,GACAC,QAAA,IAGA1C,SAAAkB,cAAA,cAAAyB,UAAA,GAEA,MAAAC,EAAA5C,SAAAkB,cAAA,sBAAA2B,QACAC,EAAA9C,SAAA+C,yBAEA,IAAA,IAAAC,EAAA,EAAAA,EAAA,GAAAA,GAAA,EAAA,CACA,IAAAV,EAAAJ,EAAAe,KAAAD,GAAAE,OAAA1B,MAAA,KAEAa,EAAAC,IAAAA,EAAA,GACAD,EAAAE,KAAAL,EAAAe,KAAAD,GAAAG,QAAA,GAAAZ,KACAF,EAAAG,KAAAN,EAAAe,KAAAD,GAAAG,QAAA,GAAAC,YACAf,EAAAI,QAAAY,KAAAC,MAAApB,EAAAe,KAAAD,GAAAO,KAAAC,UACAnB,EAAAK,QAAAW,KAAAC,MAAApB,EAAAe,KAAAD,GAAAO,KAAAE,UAEAb,EAAA1B,cAAA,MAAAwC,YAAArB,EAAAC,IACAM,EAAA1B,cAAA,wBAAAyC,IAAA,gBAAAtB,EAAAE,cACAK,EAAA1B,cAAA,gBAAAwC,YAAArB,EAAAG,KACAI,EAAA1B,cAAA,YAAAwC,YAAArB,EAAAI,QACAG,EAAA1B,cAAA,YAAAwC,YAAArB,EAAAK,QAEAkB,OAAA5D,SAAA6D,WAAAjB,GAAA,GAEAE,EAAAgB,YAAAF,QAGA5D,SAAAkB,cAAA,cAAA4C,YAAAhB,IAGAiB,YAAA7B,IACAlC,SAAAkB,cAAA,gBAAAiB,MAAAC,QAAA,OACApC,SAAAkB,cAAA,4BAAAwC,YAAAxB,EAAAe,KAAA,GAAAe,KAAAC,MAAA,OACAjE,SAAAkB,cAAA,mCACAiB,MAAA+B,MAAAhC,EAAAe,KAAA,GAAAM,KAAAY,SAAA,IAEAnE,SAAAkB,cAAA,qBAAAwC,YAAAxB,EAAAe,KAAA,GAAAM,KAAAY,SAAA,KACAnE,SAAAkB,cAAA,YAAAwC,YAAAxB,EAAAe,KAAA,GAAAM,KAAAa,SAAA,MACApE,SAAAkB,cAAA,cAAAwC,YAAAxB,EAAAe,KAAA,GAAAM,KAAAc,UAAA,QAGAC,eAAA1D,QAAAL,EAAAG,EAAA6D,EAAAC,GACA,IAAAC,EAAA,GAGAA,EADAD,EACA,GAAA1E,aAAAyE,mBAAAC,WAAA3E,MAEA0E,EAGA,GAAAzE,aAAAyE,gCAAA1E,MAFA,GAAAC,eAAAS,SAAAG,gCAAAb,MAMA,IACA,IAAA6E,QAAAC,MAAAF,GACAvC,QAAAwC,EAAAxC,OAEAlC,SAAAkB,cAAA,wBAAAyC,IAAA,gBAAAzB,EAAAe,KAAA,GAAAE,QAAA,GAAAZ,cACAvC,SAAAkB,cAAA,qBAAAwC,YAAAxB,EAAAqC,KAAAK,KACA5E,SAAAkB,cAAA,eAAAwC,YAAA,IAAAxB,EAAAqC,KAAAM,kBAEA,IAAAC,EAAA9E,SAAAkB,cAAA,wBACA4D,EAAApB,YAAAL,KAAAC,MAAApB,EAAAe,KAAA,GAAAM,KAAAwB,MAEA,IAAAC,EAAAhF,SAAAiF,cAAA,OACAD,EAAAE,UAAAC,IAAA,sBACAH,EAAAtB,YAAA,KAEA1D,SAAAkB,cAAA,mCAAAwC,YAAAxB,EAAAe,KAAA,GAAAE,QAAA,GAAAC,YAEA,IAAAgC,EAAAC,OAAAC,KAAApD,EAAAqC,KAAAa,QACAG,EAAAH,EAAAI,GAAAC,WACAC,EAAAN,EAAAI,GAAAC,WACAE,EAAAN,OAAAC,KAAApD,EAAAqC,KAAAoB,SACAC,EAAAD,EAAAH,GAAAC,WACAI,EAAAF,EAAAH,GAAAC,WAEAzF,SAAAkB,cAAA,YAAAwC,YAAA,GAAAkC,EAAA,GAAA,IAAAA,EAAAA,KAAAC,EAAA,GAAA,IAAAA,EAAAA,IACA7F,SAAAkB,cAAA,WAAAwC,YAAA,GAAA6B,EAAA,GAAA,IAAAA,EAAAA,KAAAG,EAAA,GAAA,IAAAA,EAAAA,IAEAZ,EAAAgB,sBAAA,YAAAd,GAEA,IACAe,EADAC,EAAA,IAAAC,KAGA,OAAAD,EAAAE,aAEA,KAAA,EAAAH,EAAA,QACA,MACA,KAAA,EAAAA,EAAA,SACA,MACA,KAAA,EAAAA,EAAA,YACA,MACA,KAAA,EAAAA,EAAA,SACA,MACA,KAAA,EAAAA,EAAA,UACA,MACA,KAAA,EAAAA,EAAA,SACA,MACA,KAAA,EAAAA,EAAA,UAMA,GAFA/F,SAAAkB,cAAA,SAAAwC,YAAA,GAAAqC,MAAAC,EAAAG,wBAEAzB,EAAA0B,GAAA,KAAA,CAAAC,OAAA3B,EAAA2B,OAAAC,WAAA5B,EAAA4B,YAEAtG,SAAAkB,cAAA,wBAAAiB,MAAAC,QAAA,QACApC,SAAAkB,cAAA,qBAAAiB,MAAAC,QAAA,QACApC,SAAAkB,cAAA,YAAAiB,MAAAC,QAAA,OACApC,SAAAkB,cAAA,WAAAiB,MAAAC,QAAA,OAEAH,aAAAC,GACA6B,YAAA7B,GAEA,MAAAqE,EAAAC,OAAAC,gBACAC,EAAA,MAAAxE,EAAAqC,KAAAK,gCAAAvB,KAAAC,MAAApB,EAAAe,KAAA,GAAAM,KAAAwB,qBAAA7C,EAAAe,KAAA,GAAAE,QAAA,GAAAC,cACAuD,EAAA,IAAAC,yBAAAF,GACAH,EAAAM,MAAAF,GAEA,MAAAG,GACA,IAAAC,EAAAD,EAAAR,YAAA,mBACAtG,SAAAkB,cAAA,YAAAc,mBAAA,WAAA,eAAA8E,EAAAT,UAAAU,cAIA/G,SAAAC,iBAAA,QAAAC,IAoBA,GAnBAA,EAAA8G,OAAAC,QAAA,yBACAjH,SAAAkB,cAAA,SAAAgE,UAAAC,IAAA,WAGAjF,EAAA8G,OAAAC,QAAA,cACAjH,SAAAkB,cAAA,SAAAgE,UAAAgC,OAAA,WAGAhH,EAAA8G,OAAAC,QAAA,0BACA9G,UAAAC,YAAAC,oBAAA,SAAAC,GAGAC,IAAAD,EAAAE,OAAAC,SACAC,IAAAJ,EAAAE,OAAAG,UACAC,QAAAL,IAAAG,QAKAR,EAAA8G,OAAAC,QAAA,eAAA,CACA,IAAA1C,EAAAvE,SAAAkB,cAAA,SAAAiG,MACAnH,SAAAkB,cAAA,SAAAgE,UAAAgC,OAAA,WAEAtG,QAAA,KAAA,KAAA2D,EAAA,MAGA,GAAArE,EAAA8G,OAAAC,QAAA,qBAAA,CACA1C,KAAAvE,SAAAkB,cAAA,qBAAAwC,YACA,IAAAc,EAAA,SAEAtE,EAAA8G,OAAA9B,UAAAC,IAAA,UACAnF,SAAAkB,cAAA,qBAAAgE,UAAAgC,OAAA,UAEAtG,QAAA,KAAA,KAAA2D,KAAAC,GAGA,GAAAtE,EAAA8G,OAAAC,QAAA,qBAAA,CACA1C,KAAAvE,SAAAkB,cAAA,qBAAAwC,YACA,IAAAc,EAAA,WAEAtE,EAAA8G,OAAA9B,UAAAC,IAAA,UACAnF,SAAAkB,cAAA,qBAAAgE,UAAAgC,OAAA,UAEAtG,QAAA,KAAA,KAAA2D,KAAAC,GAGA,GAAAtE,EAAA8G,OAAAC,QAAA,aAAA/G,EAAA8G,OAAAC,QAAA,cAAA,CAKA,GAJA1C,KAAAvE,SAAAkB,cAAA,qBAAAwC,YAEApC,aAAAC,QAAA,YAKA,CACA,IAAAxB,EAAAuB,aAAAC,QAAA,YAEAF,EAAAtB,EAAAyB,MAAA,KAEAzB,EAAA,IAAAsB,EAAAkD,MAEAjD,aAAA8F,QAAA,WAAArH,QATAuB,aAAA8F,QAAA,WAAA7C,MAYAvD,gBAGA,GAAAd,EAAA8G,OAAAC,QAAA,oBAAA/G,EAAA8G,OAAAC,QAAA,qBAAA,CAEA/G,EAAA8G,OAAAK,cAAA3D,YAIA,GAFApC,aAAAC,QAAA,YAKA,CACA,IAAAxB,EAAAuB,aAAAC,QAAA,YAEAF,EAAAtB,EAAAyB,MAAA,KAEAzB,EAAA,IAAAsB,EAAAkD,MAEAjD,aAAA8F,QAAA,WAAArH,QATAuB,aAAA8F,QAAA,WAAA7C,MAYAvD,gBAGAd,EAAA8G,OAAAC,QAAA,eACA1C,KAAArE,EAAA8G,OAAAtD,YACA1D,SAAAkB,cAAA,SAAAgE,UAAAgC,OAAA,WACAtG,QAAA,KAAA,KAAA2D,KAAA","file":"bundle.js","sourcesContent":["const KEY = \"1dc82a28b0407cd1aab188ddebb887d6\";\r\nconst URLBASE = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n\r\nconst citiesLocal = []\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", e => {\r\n    //Pedir activación de ubicación\r\n\r\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(function(pos) {\r\n       \r\n        //Si es aceptada guardamos la latitud y longitud\r\n        lat = pos.coords.latitude;\r\n        lon = pos.coords.longitude;\r\n\r\n        getCity(lat, lon, null);\r\n\r\n    }, function(error) {\r\n\r\n        //Si es rechazada enviamos de error por consola\r\n        console.log('Ubicación no activada');\r\n    });\r\n\r\n    getCitiesMenu();\r\n})\r\n\r\nconst getCitiesMenu = () => {\r\n\r\n    let $citiesFav = document.querySelector(\".cities-fav\");\r\n\r\n    // Limpia el HTML previo\r\n    while( $citiesFav.firstChild ) {\r\n        $citiesFav.removeChild($citiesFav.firstChild);\r\n    }\r\n\r\n    let citiesLocal = localStorage.getItem(\"ciudades\");\r\n\r\n    let citiesSplit = citiesLocal.split(\",\") \r\n\r\n    let result = citiesSplit.filter((item,index)=>{\r\n        return citiesSplit.indexOf(item) === index;\r\n    })           \r\n\r\n    result.sort;\r\n\r\n    if(result) {\r\n        result.forEach(e=> {\r\n            $citiesFav.insertAdjacentHTML(\"afterbegin\", `<div class=\"row px-4 mb-4\">\r\n                <div class=\"col city-fav\">\r\n                    ${e}\r\n                    <button class=\"btn btn-remove-fav rounded-circle d-flex justify-content-center align-items-center\"><i class=\"fas fa-heart\"></i></button>\r\n                </div>\r\n            </div>`);\r\n        });\r\n    }\r\n}\r\n\r\nconst forecastCity = json => {\r\n    document.querySelector(\".btn-type-term--c\").style.display = \"flex\";\r\n    document.querySelector(\".btn-type-term--f\").style.display = \"flex\";\r\n\r\n    const forecast = {\r\n        dia: \"\",\r\n        icon: \"\",\r\n        desc: \"\",\r\n        mintemp: \"\",\r\n        maxtemp: \"\"\r\n    }\r\n\r\n    document.querySelector(\".forecasts\").innerHTML = \"\";\r\n\r\n    const $template = document.querySelector(\".forecast-template\").content;\r\n    const $fragment = document.createDocumentFragment();\r\n\r\n    for (let i = 5; i < 40; i+=8) {\r\n        let dia = json.list[i].dt_txt.split(\" \");\r\n\r\n        forecast.dia = dia[0];\r\n        forecast.icon = json.list[i].weather[0].icon;\r\n        forecast.desc = json.list[i].weather[0].description;\r\n        forecast.mintemp = Math.round(json.list[i].main.temp_min);\r\n        forecast.maxtemp = Math.round(json.list[i].main.temp_max);\r\n        \r\n        $template.querySelector(\"h6\").textContent = forecast.dia;\r\n        $template.querySelector(\".current-wheater img\").src = `./src/images/${forecast.icon}@2x.png`;\r\n        $template.querySelector(\".description\").textContent = forecast.desc;\r\n        $template.querySelector(\".mintemp\").textContent = forecast.mintemp;\r\n        $template.querySelector(\".maxtemp\").textContent = forecast.maxtemp;\r\n\r\n        $clone = document.importNode($template, true);\r\n\r\n        $fragment.appendChild($clone);\r\n    }\r\n\r\n    document.querySelector(\".forecasts\").appendChild($fragment);\r\n}\r\n\r\nconst hightlights = json => { \r\n    document.querySelector(\".hightlights\").style.display = \"grid\";\r\n    document.querySelector(\".wind-status .wind-speed\").textContent = `${json.list[0].wind.speed} Kmh`;\r\n    let $humidityBar = document.querySelector(\".wind-status .progress-humidity\");\r\n    $humidityBar.style.width = json.list[0].main.humidity+\"%\";\r\n    \r\n    document.querySelector(\".humidity-percent\").textContent = `${json.list[0].main.humidity} %`;\r\n    document.querySelector(\".presure\").textContent = `${json.list[0].main.pressure} mb`;\r\n    document.querySelector(\".sea-level\").textContent = `${json.list[0].main.sea_level} mts`;\r\n}\r\n\r\nasync function getCity(lat, lon, city, unit) {\r\n    let url = \"\";\r\n    \r\n    if(unit) {\r\n        url = `${URLBASE}?q=${city}&lang=es&units=${unit}&appid=${KEY}`;\r\n    } else {\r\n        if (!city) {\r\n            url = `${URLBASE}?lat=${lat}&lon=${lon}&lang=es&units=metric&appid=${KEY}`;\r\n        } else {\r\n            url = `${URLBASE}?q=${city}&lang=es&units=metric&appid=${KEY}`;\r\n        }    \r\n    }\r\n    \r\n    try {\r\n        let res = await fetch(url);\r\n        let json = await res.json();\r\n        \r\n        document.querySelector(\".current-wheater img\").src = `./src/images/${json.list[0].weather[0].icon}@2x.png`;\r\n        document.querySelector(\".current-location\").textContent = json.city.name;\r\n        document.querySelector(\".population\").textContent = ` ${json.city.population} Hab.`;\r\n\r\n        let temperature = document.querySelector(\".current-temperature\");\r\n        temperature.textContent = Math.round(json.list[0].main.temp);\r\n        \r\n        let sub = document.createElement(\"SUB\");\r\n        sub.classList.add(\"text-gray-semibold\");\r\n        sub.textContent = \"°C\";\r\n\r\n        document.querySelector(\".current-phenomenom-atmospheric\").textContent = json.list[0].weather[0].description;\r\n        \r\n        let sunset = moment.unix(json.city.sunset);\r\n        let sunsetHour = sunset._d.getHours();\r\n        let sunsetMinutes = sunset._d.getHours();\r\n        let sunrise = moment.unix(json.city.sunrise);\r\n        let sunriseHour = sunrise._d.getHours();\r\n        let sunriseMinutes = sunrise._d.getHours();\r\n\r\n        document.querySelector(\".sunrise\").textContent = `${(sunriseHour < 10) ? \"0\"+sunriseHour : sunriseHour}:${(sunriseMinutes < 10 ? \"0\"+sunriseMinutes : sunriseMinutes)}`;\r\n        document.querySelector(\".sunset\").textContent = `${(sunsetHour < 10) ? \"0\"+sunsetHour : sunsetHour}:${sunsetMinutes < 10 ? \"0\"+sunsetMinutes : sunsetMinutes}`;\r\n\r\n        temperature.insertAdjacentElement(\"beforeend\", sub);\r\n\r\n        let date = new Date();\r\n        let dayWeek;\r\n\r\n        switch (date.getUTCDay()) {\r\n            \r\n            case 1: dayWeek = \"Lunes\";\r\n                    break;\r\n            case 2: dayWeek = \"Martes\";\r\n                    break;\r\n            case 3: dayWeek = \"Miércoles\";\r\n                    break;\r\n            case 4: dayWeek = \"Jueves\";\r\n                    break;\r\n            case 5: dayWeek = \"Viernes\";\r\n                    break;\r\n            case 6: dayWeek = \"Sábado\";\r\n                    break;\r\n            case 0: dayWeek = \"Domingo\";\r\n                    break;\r\n        }\r\n\r\n        document.querySelector(\".date\").textContent = `${dayWeek}, ${date.toLocaleDateString()}`;\r\n\r\n        if (!res.ok) throw {status: res.status, statusText: res.statusText};\r\n\r\n        document.querySelector(\".current-temperature\").style.display = \"block\";\r\n        document.querySelector(\".current-location\").style.display = \"block\";\r\n        document.querySelector(\".sunrise\").style.display = \"flex\";\r\n        document.querySelector(\".sunset\").style.display = \"flex\";\r\n\r\n        forecastCity(json);\r\n        hightlights(json);\r\n\r\n        const synth = window.speechSynthesis;\r\n        const text = `En ${json.city.name} hace una temperatura de ${Math.round(json.list[0].main.temp)} grados, con ${json.list[0].weather[0].description}`;\r\n        const utterThis = new SpeechSynthesisUtterance(text) \r\n        synth.speak(utterThis)\r\n\r\n    } catch(err) {\r\n        let message = err.statusText || \"Ocurrio un error\";\r\n        document.querySelector(\".content\").insertAdjacentHTML(\"afterend\",`<p><b>Error ${err.status} ${message}</b></p>`)\r\n    }\r\n}\r\n\r\ndocument.addEventListener('click', e => {\r\n    if(e.target.matches(\".btn-search-location\")) {\r\n        document.querySelector(\".menu\").classList.add(\"visible\");\r\n    }\r\n\r\n    if(e.target.matches(\".fa-times\")) {\r\n        document.querySelector(\".menu\").classList.remove(\"visible\");\r\n    }\r\n\r\n    if(e.target.matches(\".btn-current-location\")) {\r\n        navigator.geolocation.getCurrentPosition(function(pos) {\r\n       \r\n            //Si es aceptada guardamos lo latitud y longitud\r\n            lat = pos.coords.latitude;\r\n            lon = pos.coords.longitude;\r\n            getCity(lat, lon);\r\n    \r\n        })\r\n    }\r\n\r\n    if(e.target.matches(\".btn-search\")) {\r\n        let city = document.querySelector(\"input\").value;\r\n        document.querySelector(\".menu\").classList.remove(\"visible\");\r\n\r\n        getCity(null, null, city, null);\r\n    }\r\n\r\n    if(e.target.matches(\".btn-type-term--c\")) {\r\n        city = document.querySelector(\".current-location\").textContent;\r\n        let unit = \"metric\";\r\n\r\n        e.target.classList.add(\"active\");\r\n        document.querySelector(\".btn-type-term--f\").classList.remove(\"active\");\r\n\r\n        getCity(null, null, city, unit);\r\n    }\r\n\r\n    if(e.target.matches(\".btn-type-term--f\")) {\r\n        city = document.querySelector(\".current-location\").textContent;\r\n        let unit = \"imperial\";\r\n\r\n        e.target.classList.add(\"active\");\r\n        document.querySelector(\".btn-type-term--f\").classList.remove(\"active\");\r\n\r\n        getCity(null, null, city, unit);\r\n    }\r\n    \r\n    if(e.target.matches(\".btn-fav\") || e.target.matches(\".btn-fav *\")) {\r\n        city = document.querySelector(\".current-location\").textContent;\r\n\r\n        let citiesLocal = localStorage.getItem(\"ciudades\");\r\n   \r\n        if(!citiesLocal) {\r\n            localStorage.setItem(\"ciudades\", city);\r\n\r\n        } else {\r\n            let citiesLocal = localStorage.getItem(\"ciudades\");\r\n\r\n            let citiesSplit = citiesLocal.split(\" \"); \r\n\r\n            citiesLocal = [...citiesSplit, city];\r\n\r\n            localStorage.setItem(\"ciudades\", citiesLocal);\r\n        }\r\n        \r\n        getCitiesMenu();\r\n    }\r\n\r\n    if(e.target.matches(\".btn-remove-fav\") || e.target.matches(\".btn-remove-fav *\")) {\r\n        debugger\r\n        let removeCity = e.target.parentElement.textContent;\r\n\r\n        let citiesLocal = localStorage.getItem(\"ciudades\");\r\n   \r\n        if(!citiesLocal) {\r\n            localStorage.setItem(\"ciudades\", city);\r\n\r\n        } else {\r\n            let citiesLocal = localStorage.getItem(\"ciudades\");\r\n\r\n            let citiesSplit = citiesLocal.split(\" \"); \r\n\r\n            citiesLocal = [...citiesSplit, city];\r\n\r\n            localStorage.setItem(\"ciudades\", citiesLocal);\r\n        }\r\n        \r\n        getCitiesMenu();\r\n    }\r\n\r\n    if(e.target.matches(\".city-fav\")) {\r\n        city = e.target.textContent;\r\n        document.querySelector(\".menu\").classList.remove(\"visible\");\r\n        getCity(null, null, city, null);\r\n    }\r\n})\r\n"]}