{"version":3,"sources":["script.js"],"names":["KEY","URLBASE","document","addEventListener","e","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","getCity","error","console","log","forecastCity","json","querySelector","style","display","forecast","dia","icon","desc","mintemp","maxtemp","innerHTML","$template","content","$fragment","createDocumentFragment","i","list","dt_txt","split","weather","description","Math","round","main","temp_min","temp_max","textContent","src","$clone","importNode","appendChild","hightlights","wind","speed","width","humidity","pressure","sea_level","async","city","unit","url","res","fetch","name","population","temperature","temp","sub","createElement","classList","add","sunset","moment","unix","sunsetHour","_d","getHours","sunsetMinutes","sunrise","sunriseHour","sunriseMinutes","insertAdjacentElement","dayWeek","date","Date","getUTCDay","toLocaleDateString","ok","status","statusText","err","message","insertAdjacentHTML","target","matches","remove","value"],"mappings":"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","file":"bundle.js","sourcesContent":["const KEY = \"1dc82a28b0407cd1aab188ddebb887d6\";\r\nconst URLBASE = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", e => {\r\n    //Pedir activaci처n de ubicaci처n\r\n\r\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(function(pos) {\r\n       \r\n        //Si es aceptada guardamos lo latitud y longitud\r\n        lat = pos.coords.latitude;\r\n        lon = pos.coords.longitude;\r\n\r\n        getCity(lat, lon, null);\r\n\r\n    }, function(error) {\r\n\r\n        //Si es rechazada enviamos de error por consola\r\n        console.log('Ubicaci처n no activada');\r\n    });\r\n})\r\n\r\nconst forecastCity = json => {\r\n    document.querySelector(\".btn-type-term--c\").style.display = \"flex\";\r\n    document.querySelector(\".btn-type-term--f\").style.display = \"flex\";\r\n\r\n    const forecast = {\r\n        dia: \"\",\r\n        icon: \"\",\r\n        desc: \"\",\r\n        mintemp: \"\",\r\n        maxtemp: \"\"\r\n    }\r\n\r\n    document.querySelector(\".forecasts\").innerHTML = \"\";\r\n\r\n    const $template = document.querySelector(\".forecast-template\").content;\r\n    const $fragment = document.createDocumentFragment();\r\n\r\n    for (let i = 5; i < 40; i+=8) {\r\n        let dia = json.list[i].dt_txt.split(\" \");\r\n\r\n        forecast.dia = dia[0];\r\n        forecast.icon = json.list[i].weather[0].icon;\r\n        forecast.desc = json.list[i].weather[0].description;\r\n        forecast.mintemp = Math.round(json.list[i].main.temp_min);\r\n        forecast.maxtemp = Math.round(json.list[i].main.temp_max);\r\n        \r\n        $template.querySelector(\"h6\").textContent = forecast.dia;\r\n        $template.querySelector(\".current-wheater img\").src = `./src/images/${forecast.icon}@2x.png`;\r\n        $template.querySelector(\".description\").textContent = forecast.desc;\r\n        $template.querySelector(\".mintemp\").textContent = forecast.mintemp;\r\n        $template.querySelector(\".maxtemp\").textContent = forecast.maxtemp;\r\n\r\n        $clone = document.importNode($template, true);\r\n\r\n        $fragment.appendChild($clone);\r\n    }\r\n\r\n    document.querySelector(\".forecasts\").appendChild($fragment);\r\n}\r\n\r\nconst hightlights = json => { \r\n    document.querySelector(\".hightlights\").style.display = \"grid\";\r\n    document.querySelector(\".wind-status .wind-speed\").textContent = `${json.list[0].wind.speed} Kmh`;\r\n    let $humidityBar = document.querySelector(\".wind-status .progress-humidity\");\r\n    $humidityBar.style.width = json.list[0].main.humidity+\"%\";\r\n    \r\n    document.querySelector(\".humidity-percent\").textContent = `${json.list[0].main.humidity} %`;\r\n    document.querySelector(\".presure\").textContent = `${json.list[0].main.pressure} mts`;\r\n    document.querySelector(\".sea-level\").textContent = `${json.list[0].main.sea_level} mts`;\r\n}\r\n\r\nasync function getCity(lat, lon, city, unit) {\r\n    let url = \"\";\r\n    \r\n    if(unit) {\r\n        url = `${URLBASE}?q=${city}&lang=es&units=${unit}&appid=${KEY}`;\r\n    } else {\r\n        if (!city) {\r\n            url = `${URLBASE}?lat=${lat}&lon=${lon}&lang=es&units=metric&appid=${KEY}`;\r\n        } else {\r\n            url = `${URLBASE}?q=${city}&lang=es&units=metric&appid=${KEY}`;\r\n        }    \r\n    }\r\n    \r\n    try {\r\n        let res = await fetch(url);\r\n        let json = await res.json();\r\n        \r\n        document.querySelector(\".current-wheater img\").src = `./src/images/${json.list[0].weather[0].icon}@2x.png`;\r\n        document.querySelector(\".current-location\").textContent = json.city.name;\r\n        document.querySelector(\".population\").textContent = ` ${json.city.population} Hab.`;\r\n\r\n        let temperature = document.querySelector(\".current-temperature\");\r\n        temperature.textContent = Math.round(json.list[0].main.temp);\r\n        \r\n        let sub = document.createElement(\"SUB\");\r\n        sub.classList.add(\"text-gray-semibold\");\r\n        sub.textContent = \"째C\";\r\n\r\n        document.querySelector(\".current-phenomenom-atmospheric\").textContent = json.list[0].weather[0].description;\r\n        \r\n        let sunset = moment.unix(json.city.sunset);\r\n        let sunsetHour = sunset._d.getHours();\r\n        let sunsetMinutes = sunset._d.getHours();\r\n        let sunrise = moment.unix(json.city.sunrise);\r\n        let sunriseHour = sunrise._d.getHours();\r\n        let sunriseMinutes = sunrise._d.getHours();\r\n\r\n        document.querySelector(\".sunrise\").textContent = `${(sunriseHour < 10) ? \"0\"+sunriseHour : sunriseHour}:${(sunriseMinutes < 10 ? \"0\"+sunriseMinutes : sunriseMinutes)}`;\r\n        document.querySelector(\".sunset\").textContent = `${(sunsetHour < 10) ? \"0\"+sunsetHour : sunsetHour}:${sunsetMinutes < 10 ? \"0\"+sunsetMinutes : sunsetMinutes}`;\r\n\r\n        temperature.insertAdjacentElement(\"beforeend\", sub);\r\n\r\n        let date = new Date();\r\n        let dayWeek;\r\n\r\n        switch (date.getUTCDay()) {\r\n            \r\n            case 1: dayWeek = \"Lunes\";\r\n                    break;\r\n            case 2: dayWeek = \"Martes\";\r\n                    break;\r\n            case 3: dayWeek = \"Mi챕rcoles\";\r\n                    break;\r\n            case 4: dayWeek = \"Jueves\";\r\n                    break;\r\n            case 5: dayWeek = \"Viernes\";\r\n                    break;\r\n            case 6: dayWeek = \"S찼bado\";\r\n                    break;\r\n            case 7: dayWeek = \"Domingo\";\r\n                    break;\r\n        }\r\n\r\n        document.querySelector(\".date\").textContent = `${dayWeek}, ${date.toLocaleDateString()}`;\r\n\r\n        if (!res.ok) throw {status: res.status, statusText: res.statusText};\r\n\r\n        document.querySelector(\".current-temperature\").style.display = \"block\";\r\n        document.querySelector(\".current-location\").style.display = \"block\";\r\n        document.querySelector(\".sunrise\").style.display = \"flex\";\r\n        document.querySelector(\".sunset\").style.display = \"flex\";\r\n\r\n        forecastCity(json);\r\n        hightlights(json);\r\n\r\n    } catch(err) {\r\n        let message = err.statusText || \"Ocurrio un error\";\r\n        document.querySelector(\".content\").insertAdjacentHTML(\"afterend\",`<p><b>Error ${err.status} ${message}</b></p>`)\r\n    }\r\n}\r\n\r\ndocument.addEventListener('click', e => {\r\n    if(e.target.matches(\".btn-search-location\")) {\r\n        document.querySelector(\".menu\").classList.add(\"visible\");\r\n    }\r\n\r\n    if(e.target.matches(\".fa-times\")) {\r\n        document.querySelector(\".menu\").classList.remove(\"visible\");\r\n    }\r\n\r\n\r\n    if(e.target.matches(\".btn-current-location\")) {\r\n        navigator.geolocation.getCurrentPosition(function(pos) {\r\n       \r\n            //Si es aceptada guardamos lo latitud y longitud\r\n            lat = pos.coords.latitude;\r\n            lon = pos.coords.longitude;\r\n            getCity(lat, lon);\r\n    \r\n        })\r\n    }\r\n\r\n    if(e.target.matches(\".btn-search\")) {\r\n        let city = document.querySelector(\"input\").value;\r\n        document.querySelector(\".menu\").classList.remove(\"visible\");\r\n\r\n        getCity(null, null, city, null);\r\n    }\r\n\r\n    if(e.target.matches(\".btn-type-term--c\")) {\r\n        city = document.querySelector(\".current-location\").textContent;\r\n        let unit = \"metric\";\r\n\r\n        e.target.classList.add(\"active\");\r\n        document.querySelector(\".btn-type-term--f\").classList.remove(\"active\");\r\n\r\n        getCity(null, null, city, unit);\r\n    }\r\n\r\n    if(e.target.matches(\".btn-type-term--f\")) {\r\n        city = document.querySelector(\".current-location\").textContent;\r\n        let unit = \"imperial\";\r\n\r\n        e.target.classList.add(\"active\");\r\n        document.querySelector(\".btn-type-term--f\").classList.remove(\"active\");\r\n\r\n        getCity(null, null, city, unit);\r\n    }\r\n})\r\n"]}