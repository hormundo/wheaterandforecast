{"version":3,"sources":["script.js"],"names":["KEY","URL","lat","lon","document","addEventListener","e","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","getCity","error","console","log","forecastCity","json","forecast","dia","icon","desc","mintemp","maxtemp","i","list","dt_txt","split","weather","description","Math","round","main","temp_min","temp_max","async","res","fetch","querySelector","src","textContent","city","name","population","temperature","temp","sub","createElement","classList","add","wind","speed","sunset","moment","unix","sunsetHour","_d","getHours","sunsetMinutes","sunrise","sunriseHour","sunriseMinutes","insertAdjacentElement","dayWeek","date","Date","getUTCDate","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo","toLocaleDateString","ok","status","statusText","err","message","insertAdjacentHTML"],"mappings":"AAAA,MAAAA,IAAA,mCACAC,IAAA,kDACA,IAAAC,IACAC,IAEAC,SAAAC,iBAAA,mBAAAC,IAGAC,UAAAC,aAAAD,UAAAC,YAAAC,oBAAA,SAAAC,GAGAR,IAAAQ,EAAAC,OAAAC,SACAT,IAAAO,EAAAC,OAAAE,UAEAC,QAAAZ,IAAAC,QAEA,SAAAY,GAGAC,QAAAC,IAAA,8BAIA,MAAAC,aAAAC,IAEA,MAAAC,EAAA,CACAC,IAAA,GACAC,KAAA,GACAC,KAAA,GACAC,QAAA,GACAC,QAAA,IAGA,IAAA,IAAAC,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAAL,EAAAF,EAAAQ,KAAAD,GAAAE,OAAAC,MAAA,KACAT,EAAAC,IAAAA,EAAA,GACAD,EAAAE,KAAAH,EAAAQ,KAAA,GAAAG,QAAA,GAAAR,KACAF,EAAAG,KAAAJ,EAAAQ,KAAA,GAAAG,QAAA,GAAAC,YACAX,EAAAI,QAAAQ,KAAAC,MAAAd,EAAAQ,KAAA,GAAAO,KAAAC,UACAf,EAAAK,QAAAO,KAAAC,MAAAd,EAAAQ,KAAA,GAAAO,KAAAE,YAIAC,eAAAvB,QAAAZ,EAAAC,GACA,IAEA,IAAAmC,QAAAC,MAAA,GAAAtC,WAAAC,SAAAC,gCAAAH,OACAmB,QAAAmB,EAAAnB,OAEAf,SAAAoC,cAAA,wBAAAC,IAAA,iBAAAtB,EAAAQ,KAAA,GAAAG,QAAA,GAAAR,cACAlB,SAAAoC,cAAA,qBAAAE,YAAAvB,EAAAwB,KAAAC,KACAxC,SAAAoC,cAAA,eAAAE,YAAA,IAAAvB,EAAAwB,KAAAE,kBAEA,IAAAC,EAAA1C,SAAAoC,cAAA,wBACAM,EAAAJ,YAAAV,KAAAC,MAAAd,EAAAQ,KAAA,GAAAO,KAAAa,MAEA,IAAAC,EAAA5C,SAAA6C,cAAA,OACAD,EAAAE,UAAAC,IAAA,sBACAH,EAAAN,YAAA,KAEAtC,SAAAoC,cAAA,mCAAAE,YAAAvB,EAAAQ,KAAA,GAAAG,QAAA,GAAAC,YAEA3B,SAAAoC,cAAA,eAAAE,YAAA,yBAAAvB,EAAAQ,KAAA,GAAAyB,KAAAC,YAEA,IAAAC,EAAAC,OAAAC,KAAArC,EAAAwB,KAAAW,QACAG,EAAAH,EAAAI,GAAAC,WACAC,EAAAN,EAAAI,GAAAC,WACAE,EAAAN,OAAAC,KAAArC,EAAAwB,KAAAkB,SACAC,EAAAD,EAAAH,GAAAC,WACAI,EAAAF,EAAAH,GAAAC,WAEAvD,SAAAoC,cAAA,YAAAE,YAAA,GAAAoB,EAAA,GAAA,IAAAA,EAAAA,KAAAC,EAAA,GAAA,IAAAA,EAAAA,IACA3D,SAAAoC,cAAA,WAAAE,YAAA,GAAAe,EAAA,GAAA,IAAAA,EAAAA,KAAAG,EAAA,GAAA,IAAAA,EAAAA,IAEAd,EAAAkB,sBAAA,YAAAhB,GAEA,IACAiB,EADAC,EAAA,IAAAC,KAGA,OAAAD,EAAAE,YACA,KAAA,EAAAH,EAAAI,MACA,MACA,KAAA,EAAAJ,EAAAK,OACA,MACA,KAAA,EAAAL,EAAAM,UACA,MACA,KAAA,EAAAN,EAAAO,OACA,MACA,KAAA,EAAAP,EAAAQ,QACA,MACA,KAAA,EAAAR,EAAAS,OACA,MACA,KAAA,EAAAT,EAAAU,QAOA,GAFAvE,SAAAoC,cAAA,SAAAE,YAAA,GAAAuB,MAAAC,EAAAU,wBAEAtC,EAAAuC,GAAA,KAAA,CAAAC,OAAAxC,EAAAwC,OAAAC,WAAAzC,EAAAyC,YAEA7D,aAAAC,GACA,MAAA6D,GACA,IAAAC,EAAAD,EAAAD,YAAA,mBACA3E,SAAAoC,cAAA,YAAA0C,mBAAA,WAAA,eAAAF,EAAAF,UAAAG","file":"bundle.js","sourcesContent":["const KEY = \"1dc82a28b0407cd1aab188ddebb887d6\";\r\nconst URL = \"http://api.openweathermap.org/data/2.5/forecast\";\r\nlet lat;\r\nlet lon;\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", e => {\r\n    //Pedir activación de ubicación\r\n\r\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(function(pos) {\r\n       \r\n        //Si es aceptada guardamos lo latitud y longitud\r\n        lat = pos.coords.latitude;\r\n        lon = pos.coords.longitude;\r\n\r\n        getCity(lat, lon);\r\n\r\n    }, function(error) {\r\n\r\n        //Si es rechazada enviamos de error por consola\r\n        console.log('Ubicación no activada');\r\n    });\r\n})\r\n\r\nconst forecastCity = json => {\r\n   \r\n    const forecast = {\r\n        dia: \"\",\r\n        icon: \"\",\r\n        desc: \"\",\r\n        mintemp: \"\",\r\n        maxtemp: \"\"\r\n    }\r\n\r\n    for (let i = 1; i < 6; i++) {\r\n        debugger\r\n        let dia = json.list[i].dt_txt.split(\" \");\r\n        forecast.dia = dia[0];\r\n        forecast.icon = json.list[0].weather[0].icon;\r\n        forecast.desc = json.list[0].weather[0].description;\r\n        forecast.mintemp = Math.round(json.list[0].main.temp_min);\r\n        forecast.maxtemp = Math.round(json.list[0].main.temp_max);\r\n    }\r\n}\r\n\r\nasync function getCity(lat, lon) {\r\n    try {\r\n        \r\n        let res = await fetch(`${URL}?lat=${lat}&lon=${lon}&lang=es&units=metric&appid=${KEY}`)\r\n        let json = await res.json();\r\n        \r\n        document.querySelector(\".current-wheater img\").src = `../src/images/${json.list[0].weather[0].icon}@2x.png`;\r\n        document.querySelector(\".current-location\").textContent = json.city.name;\r\n        document.querySelector(\".population\").textContent = ` ${json.city.population} Hab.`;\r\n\r\n        let temperature = document.querySelector(\".current-temperature\");\r\n        temperature.textContent = Math.round(json.list[0].main.temp);\r\n        \r\n        let sub = document.createElement(\"SUB\");\r\n        sub.classList.add(\"text-gray-semibold\");\r\n        sub.textContent = \"°C\";\r\n\r\n        document.querySelector(\".current-phenomenom-atmospheric\").textContent = json.list[0].weather[0].description;\r\n\r\n        document.querySelector(\".speed-wind\").textContent = `Velocidad del viento: ${json.list[0].wind.speed} Kmh`;\r\n        \r\n        let sunset = moment.unix(json.city.sunset);\r\n        let sunsetHour = sunset._d.getHours();\r\n        let sunsetMinutes = sunset._d.getHours();\r\n        let sunrise = moment.unix(json.city.sunrise);\r\n        let sunriseHour = sunrise._d.getHours();\r\n        let sunriseMinutes = sunrise._d.getHours();\r\n\r\n        document.querySelector(\".sunrise\").textContent = `${(sunriseHour < 10) ? \"0\"+sunriseHour : sunriseHour}:${(sunriseMinutes < 10 ? \"0\"+sunriseMinutes : sunriseMinutes)}`;\r\n        document.querySelector(\".sunset\").textContent = `${(sunsetHour < 10) ? \"0\"+sunsetHour : sunsetHour}:${sunsetMinutes < 10 ? \"0\"+sunsetMinutes : sunsetMinutes}`;\r\n\r\n        temperature.insertAdjacentElement(\"beforeend\", sub);\r\n\r\n        let date = new Date();\r\n        let dayWeek;\r\n\r\n        switch (date.getUTCDate) {\r\n            case 1: dayWeek = Lunes;\r\n                    break;\r\n            case 2: dayWeek = Martes;\r\n                    break;\r\n            case 3: dayWeek = Miércoles;\r\n                    break;\r\n            case 4: dayWeek = Jueves;\r\n                    break;\r\n            case 5: dayWeek = Viernes;\r\n                    break;\r\n            case 6: dayWeek = Sábado;\r\n                    break;\r\n            case 7: dayWeek = Domingo;\r\n                    break;\r\n        }\r\n        \r\n\r\n        document.querySelector(\".date\").textContent = `${dayWeek}, ${date.toLocaleDateString()}`;\r\n\r\n        if (!res.ok) throw {status: res.status, statusText: res.statusText};\r\n\r\n        forecastCity(json);\r\n    } catch(err) {\r\n        let message = err.statusText || \"Ocurrio un error\";\r\n        document.querySelector(\".content\").insertAdjacentHTML(\"afterend\",`<p><b>Error ${err.status} ${message}</b></p>`)\r\n    }\r\n}\r\n\r\n"]}